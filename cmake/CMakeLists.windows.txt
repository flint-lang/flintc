# Specify C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Force static runtime libraries
set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")

# Set default build type if not specified
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Debug" CACHE STRING "Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel." FORCE)
endif()

# Set the possible values of build type for cmake-gui
set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
    "Debug"
    "Release"
    "MinSizeRel"
    "RelWithDebInfo"
)

# Output directories
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/out)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# Windows-specific compiler flags
set(BASE_CXX_FLAGS
    /W4             # Warning level 4
    /EHsc          # Enable C++ exceptions
    /MT            # Static runtime library
    /Zc:wchar_t    # Use native wchar_t
    /Zc:inline     # Remove unreferenced functions or data if they're COMDAT or have internal linkage
    /GR            # Enable RTTI
    /D_CRT_SECURE_NO_WARNINGS    # Disable warnings about unsafe CRT functions
    /DWIN32
    /D_WINDOWS
    /DWINDOWS
    /DLLVM_ON_WIN32
    /DLLVM_STATIC  # Static LLVM
)

# Source Files
set(MAIN_FILE src/main.cpp)
set(TEST_FILES tests/tests.cpp)
file(GLOB_RECURSE SRC_FILES "src/*.cpp")
list(REMOVE_ITEM SRC_FILES ${CMAKE_SOURCE_DIR}/${MAIN_FILE})

# Include directories
include_directories(
    ${CMAKE_SOURCE_DIR}/include
    ${CMAKE_SOURCE_DIR}/tests
    # Add LLVM include path - adjust this to your Windows LLVM installation
    "C:/Program Files/LLVM/include"
)

# Link directories
link_directories(
    # Add LLVM lib path - adjust this to your Windows LLVM installation
    "C:/Program Files/LLVM/lib"
)

# Function to set common properties for targets
function(set_common_properties target)
    # Add the C++ flags
    target_compile_options(${target} PRIVATE ${BASE_CXX_FLAGS})

    # Static linking flags
    set_target_properties(${target} PROPERTIES
        LINK_FLAGS "/INCREMENTAL:NO /NODEFAULTLIB:MSVCRT"
    )

    # Link with LLVM libraries statically
    target_link_libraries(${target} PRIVATE
        # Add your required LLVM libraries here
        # Example:
        LLVMX86CodeGen
        LLVMCore
        LLVMSupport
        # Add other LLVM libraries as needed

        # Windows-specific libraries
        ws2_32
        psapi
        shell32
        ole32
        uuid
        advapi32
    )
endfunction()

# Static flintc
add_executable(flintc ${MAIN_FILE} ${SRC_FILES})
set_common_properties(flintc)

# Static tests
add_executable(tests ${TEST_FILES} ${SRC_FILES})
set_common_properties(tests)

# Create build directories
file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/out)
file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/obj)

# Clean-all target
add_custom_target(clean-all
    COMMAND ${CMAKE_COMMAND} -E remove_directory ${CMAKE_BINARY_DIR}
    COMMENT "Cleaning build directories"
)

# Build-all target
add_custom_target(build-all
    DEPENDS
        flintc
        tests
)
