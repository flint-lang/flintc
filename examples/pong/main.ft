use Core.print
use Core.read

use "data.ft"

// Save the current cursor position
def save_cursor():
    print("\x1B[s");

// Restore the cursor position to the last saved cursor position
def restore_cursor():
    print("\x1B[u");

def move_cursor(i32 x, i32 y):
    print("\x1B[");
    print($"{y};{x}H");

def render_game_screen(GameData game_data):
    restore_cursor();
    i32 width = game_data.screen.width;
    i32 height = game_data.screen.height;
    for y := 0; y < height; y++:
        for x := 0; x < width; x++:
            if x == 0 or x == width - 1:
                print(game_data.screen.delim_lr);
            else if y == 0 or y == height - 1:
                print(game_data.screen.delim_ud);
            else:
                print(' ');
        print('\n');

def render_input_display(GameData game_data):
    i32 width = game_data.screen.width;
    print(game_data.screen.delim_lr);
    print($" Move Up: {game_data.keymap.up_key} {game_data.screen.delim_lr}");
    print($" Move Down: {game_data.keymap.down_key} {game_data.screen.delim_lr}");
    print($" Exit: {game_data.keymap.exit_key}");
    move_cursor(width, game_data.screen.height + 2);
    print($"{game_data.screen.delim_lr}\n");
    print(game_data.screen.delim_lr);
    for i := 0; i < width - 2; i++:
        print(game_data.screen.delim_ud);
    print(game_data.screen.delim_lr);
    print('\n');

def draw_game_objects(GameData game_data):
    // First, draw the left pedal
    restore_cursor();
    i32 x_pos = 3;
    i32 y_pos = (game_data.left.pos + 1) - game_data.left.size / 2;
    for i := 0; i < game_data.left.size; i++:
        move_cursor(x_pos, y_pos + i);
        print(game_data.left.texture);

    // Then, draw the right pedal
    restore_cursor();
    x_pos = game_data.screen.width - 2;
    y_pos = (game_data.right.pos + 2) - game_data.right.size / 2;
    for i := 0; i < game_data.right.size; i++:
        move_cursor(x_pos, y_pos + i);
        print(game_data.right.texture);

    // Finally, draw the ball
    restore_cursor();
    i32x2 ball_pos = game_data.ball.pos;
    move_cursor(ball_pos.x, ball_pos.y + 2);
    print(game_data.ball.texture);

def render_input_line(GameData game_data):
    i32x2 screen_size = (game_data.screen.width, game_data.screen.height);
    u8 delim_lr = game_data.screen.delim_lr;
    move_cursor(1, screen_size.y + 4);
    for i := 0; i < screen_size.x - 1; i++:
        print(' ');
    print(delim_lr);
    print('\n');
    print(delim_lr);
    for i := 0; i < screen_size.x - 2; i++:
        print(game_data.screen.delim_ud);
    print(delim_lr);
    print('\n');
    move_cursor(0, screen_size.y + 4);
    print(delim_lr);
    print(" > ");

def handle_user_input(mut GameData game_data):
    // Clear the user input before parsing the new user input
    bool8 new_user_input = u8(0);
    u8 user_input_char = ' ';
    bool user_input_valid = false;
    while not user_input_valid:
        str user_input  = read_str();
        if user_input.length == 1:
            if user_input[0] == game_data.keymap.exit_key:
                new_user_input.$0 = true;
                user_input_valid = true;
            else if user_input[0] == game_data.keymap.up_key:
                new_user_input.$2 = true;
                user_input_valid = true;
            else if user_input[0] == game_data.keymap.down_key:
                new_user_input.$3 = true;
                user_input_valid = true;
    game_data.user_input = new_user_input;

def move_game_objects(mut GameData game_data):
    // Check in which direction to move the left pedal
    if game_data.user_input.$2:
        // Left pedal up
        game_data.left.pos = game_data.left.pos - 1;
    else if game_data.user_input.$3:
        // Left pedal down
        game_data.left.pos = game_data.left.pos + 1;

    // Check in which direction to move the right pedal
    if game_data.user_input.$4:
        // Right pedal up
        game_data.right.pos = game_data.right.pos - 1;
    else if game_data.user_input.$5:
        // Right pedal down
        game_data.right.pos = game_data.right.pos + 1;

    // Move the ball
    if game_data.ball.pos.y == 1 or game_data.ball.pos.y == game_data.screen.height - 2:
        // The ball reflects off the top or bottom of the screen
        game_data.ball.dir = game_data.ball.dir * (1, -1);

    bool ball_pos_ge_left = game_data.ball.pos.y >= game_data.left.pos - 2 - game_data.left.size / 2;
    bool ball_pos_le_left = game_data.ball.pos.y <= game_data.left.pos - 2 + game_data.left.size / 2;
    bool ball_pos_ge_right = game_data.ball.pos.y >= game_data.right.pos - 2 - game_data.right.size / 2;
    bool ball_pos_le_right = game_data.ball.pos.y <= game_data.right.pos - 2 + game_data.right.size / 2;

    if game_data.ball.pos.x == 4:
        // print($"ge_left = {ball_pos_ge_left}\n");
        // print($"le_left = {ball_pos_le_left}\n");
        // print($"ge_right = {ball_pos_ge_right}\n");
        // print($"le_right = {ball_pos_le_right}\n");
        // print($"ball_pos.y = {game_data.ball.pos.y}\n");
        // print($"left.pos = {game_data.left.pos}\n");
        // print($"left.size = {game_data.left.size}\n");
        // if true:
        //     throw 69;

        if ball_pos_ge_left and ball_pos_le_left:
            // The ball reflects off the left pedal
            game_data.ball.dir = game_data.ball.dir * (-1, 1);
    else if game_data.ball.pos.x == game_data.screen.width - 4 and ball_pos_ge_right and ball_pos_le_left:
        // The ball reflects off the right pedal
        game_data.ball.dir = game_data.ball.dir * (-1, 1);
    else if game_data.ball.pos.x == 2 or game_data.ball.pos.x == game_data.screen.width - 1:
        // Check if the ball collides with the pedal, if not its game over
        bool8 old_user_input = game_data.user_input;
        old_user_input.$1 = true;
        game_data.user_input = old_user_input;
    game_data.ball.pos = game_data.ball.pos + game_data.ball.dir;

def main():
    // Store the initial cursor position with which the game is reset over and over again
    save_cursor();

    // Initialize the game's data
    Pedal pedal = Pedal(15, 3, '#');
    i32x2 ball_pos = (49, 14);
    i32x2 ball_dir = (-1, 1);
    i32x2 ball_size = (1, 1);
    Ball ball = Ball(ball_pos, ball_dir, ball_size, 'O');
    Screen screen = Screen(99, 29, '|', '=');
    KeyMap keymap = KeyMap('w', 's', 'e');
    bool8 user_input = u8(0); // Set all bits to 0
    // Because the pedals are copied into the game_data, we can use the same pedal for the initial values
    GameData game_data = GameData(pedal, pedal, ball, screen, keymap, user_input);

    bool is_running = true;
    while is_running:
        // Render the game screen
        render_game_screen(game_data);

        // Render the available inputs
        render_input_display(game_data);

        // Store the end position of the screen to reset to after exiting the game
        if not is_running:
            save_cursor();

        // Draw the game objects, like the left and right pedal as well as the ball
        draw_game_objects(game_data);

        // Render the user input line
        render_input_line(game_data);

        // Handle user input commands
        handle_user_input(game_data);

        // Exit the game if the user presses the exit button
        if game_data.user_input.$0:
            is_running = false;
        else:
            // Move all game objects depending on the users input
            move_game_objects(game_data);

        // Check if it's game over
        if game_data.user_input.$1:
            is_running = false;
    
    // Restore the cursor position after the porgram has finished rendering
    restore_cursor();
      
