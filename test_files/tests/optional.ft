use Core.assert

data Vec2:
    i32 x;
    i32 y;
    Vec2(x, y);

def vec2_equals(Vec2? v2, i32 x, i32 y) -> bool:
    Vec2 v = v2!;
    return v.x == x and v.y == y;

def move_maybe(mut Vec2? v2, i32 x, i32 y):
    if v2 != none:
        Vec2 v = v2!;
        v.(x, y) += (x, y);
        v2 = v;

def equals(i32? lhs, i32? rhs) -> bool:
    return lhs == rhs;

def has_value(i32? opt) -> bool:
    return opt != none;

def set_value(mut i32? opt, i32 val):
    opt = val;

def test_optional():
    i32? maybe = 69;
    i32 unwrapped = maybe!;
    assert(unwrapped == 69);

    maybe = none;
    assert(maybe == none);
    assert(not has_value(maybe));

    assert(none == none);
    assert(not (none != none));

    i32? maybe_2 = 69;
    assert(maybe != maybe_2);
    assert(not equals(maybe, maybe_2));

    maybe = 69;
    assert(maybe == maybe_2);

    maybe = none;
    maybe_2 = none;
    assert(maybe == maybe_2);
    assert(not (maybe != maybe_2));

    maybe = 69;
    i32 res = maybe ?? 7;
    assert(res == 69);

    maybe = none;
    res = maybe ?? 7;
    assert(res == 7);

    res = 5 + maybe ?? 7;
    assert(res == 12);

    maybe = 10;
    res = maybe ?? 7 + 8;
    assert(res == 18);

    set_value(maybe, 22);
    assert(maybe != none);
    assert(maybe! == 22);

    Vec2 v = Vec2(10, 20);
    Vec2? vm = v;
    assert(v.x == 10 and v.y == 20);
    assert(vec2_equals(vm, 10, 20));
    move_maybe(vm, 2, 3);
    assert(v.x == 10 and v.y == 20);
    assert(vec2_equals(vm, 12, 23));
