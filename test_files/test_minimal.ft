use Core.assert
use Core.print
use Core.read

def divide(i32 x, i32 y) -> i32 {ErrAssert}:
	if y == 0:
		throw ErrAssert.AssertionFailed;
	return x / y;

def catch_this(i32 x, i32 y) -> i32:
	return divide(x, y);

def main():
	i32 res = divide(10, 2) catch err:
		assert(false);
	assert(res == 5);

	res = divide(10, 0) catch err:
		print($"catched first value: {err}\n");
		assert(true);
	assert(res == 0);

	res = catch_this(10, 5) catch err:
		assert(false);
	assert(res == 2);

	res = catch_this(10, 0) catch err:
		print($"catched second value: {err}\n");
		assert(true);
	assert(res == 0);

	print("Enter i32 value: ");
	i32 val = read_i32() catch err:
		print($"err = {err}\n");
	print($"val = {val}\n");

	assert(false) catch err:
		print($"ErrAssert id = {err}\n");
