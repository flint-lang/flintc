use Core.system
use Core.assert

use "utils.ft"

test "0_primitives_i32.ft":
	str path = "wiki_tests/beginners_guide/variables_and_types";
	str file = "0_primitives_i32.ft";
	(exit_code, output) := system_command($"flintc --file {path}/{file}");
	assert(exit_code == 0);
	assert(output == "");
	(exit_code, output) = system_command("./main");
	assert(exit_code == 0);
	assert(output == "");

test "1_primitives_u32.ft":
	str path = "wiki_tests/beginners_guide/variables_and_types";
	str file = "1_primitives_u32.ft";
	(exit_code, output) := system_command($"flintc --file {path}/{file}");
	assert(exit_code == 0);
	assert(output == "");
	(exit_code, output) = system_command("./main");
	assert(exit_code == 0);
	assert(output == "");

test "2_primitives_f32.ft":
	str path = "wiki_tests/beginners_guide/variables_and_types";
	str file = "2_primitives_f32.ft";
	(exit_code, output) := system_command($"flintc --file {path}/{file}");
	assert(exit_code == 0);
	assert(output == "");
	(exit_code, output) = system_command("./main");
	assert(exit_code == 0);
	assert(output == "");

test "3_primitives_str.ft":
	str path = "wiki_tests/beginners_guide/variables_and_types";
	str file = "3_primitives_str.ft";
	(exit_code, output) := system_command($"flintc --file {path}/{file}");
	assert(exit_code == 0);
	assert(output == "");
	(exit_code, output) = system_command("./main");
	assert(exit_code == 0);
	assert(output == "");

test "4_variables_single.ft":
	str path = "wiki_tests/beginners_guide/variables_and_types";
	str file = "4_variables_single.ft";
	(exit_code, output) := system_command($"flintc --file {path}/{file}");
	assert(exit_code == 0);
	assert(output == "");
	(exit_code, output) = system_command("./main");
	assert(exit_code == 0);
	assert(output == "");

test "5_variables_assignment.ft":
	str path = "wiki_tests/beginners_guide/variables_and_types";
	str file = "5_variables_assignment.ft";
	(exit_code, output) := system_command($"flintc --file {path}/{file}");
	assert(exit_code == 0);
	assert(output == "");
	(exit_code, output) = system_command("./main");
	assert(exit_code == 0);
	assert(output == "");

test "6_variables_shadowing.ft":
	str path = "wiki_tests/beginners_guide/variables_and_types";
	str file = "6_variables_shadowing.ft";
	(exit_code, output) := system_command($"flintc --no-colors --file {path}/{file}");
	assert(exit_code == 1);
	assert(starts_with(output, "Parse Error at wiki_tests/beginners_guide/variables_and_types/6_variables_shadowing.ft:3:13\n -- Variable 'x' already exists\n"));

test "7_variables_shadowing_diff.ft":
	str path = "wiki_tests/beginners_guide/variables_and_types";
	str file = "7_variables_shadowing_diff.ft";
	(exit_code, output) := system_command($"flintc --no-colors --file {path}/{file}");
	assert(exit_code == 1);
	assert(starts_with(output, "Parse Error at wiki_tests/beginners_guide/variables_and_types/7_variables_shadowing_diff.ft:3:13\n -- Variable 'x' already exists\n"));

test "8_inferred_typing_inf.ft":
	str path = "wiki_tests/beginners_guide/variables_and_types";
	str file = "8_inferred_typing_inf.ft";
	(exit_code, output) := system_command($"flintc --file {path}/{file}");
	assert(exit_code == 0);
	assert(output == "");
	(exit_code, output) = system_command("./main");
	assert(exit_code == 0);
	assert(output == "");

test "9_inferred_typing_exp.ft":
	str path = "wiki_tests/beginners_guide/variables_and_types";
	str file = "9_inferred_typing_exp.ft";
	(exit_code, output) := system_command($"flintc --file {path}/{file}");
	assert(exit_code == 0);
	assert(output == "");
	(exit_code, output) = system_command("./main");
	assert(exit_code == 0);
	assert(output == "");

test "10_operators_plus.ft":
	str path = "wiki_tests/beginners_guide/variables_and_types";
	str file = "10_operators_plus.ft";
	(exit_code, output) := system_command($"flintc --file {path}/{file}");
	assert(exit_code == 0);
	assert(output == "");
	(exit_code, output) = system_command("./main");
	assert(exit_code == 0);
	assert(output == "u32 add overflow caught\n");

test "11_operators_minus.ft":
	str path = "wiki_tests/beginners_guide/variables_and_types";
	str file = "11_operators_minus.ft";
	(exit_code, output) := system_command($"flintc --file {path}/{file}");
	assert(exit_code == 0);
	assert(output == "");
	(exit_code, output) = system_command("./main");
	assert(exit_code == 0);
	assert(output == "u32 sub underflow caught\n");

test "12_operators_div.ft":
	str path = "wiki_tests/beginners_guide/variables_and_types";
	str file = "12_operators_div.ft";
	(exit_code, output) := system_command($"flintc --file {path}/{file}");
	assert(exit_code == 0);
	assert(output == "");
	(exit_code, output) = system_command("./main");
	assert(exit_code == 0);
	assert(output == "");

test "13_operators_fp_arithmetic.ft":
	str path = "wiki_tests/beginners_guide/variables_and_types";
	str file = "13_operators_fp_arithmetic.ft";
	(exit_code, output) := system_command($"flintc --file {path}/{file}");
	assert(exit_code == 0);
	assert(output == "");
	(exit_code, output) = system_command("./main");
	assert(exit_code == 0);
	assert(output == "0.05 + 0.3 = 0.350000012665987\n0.350000012665987 == 0.35 ? false\n");

test "14_operators_strings.ft":
	str path = "wiki_tests/beginners_guide/variables_and_types";
	str file = "14_operators_strings.ft";
	(exit_code, output) := system_command($"flintc --file {path}/{file}");
	assert(exit_code == 0);
	assert(output == "");
	(exit_code, output) = system_command("./main");
	assert(exit_code == 0);
	assert(output == "Hello, World!\n");

test "15_casting_mismatch.ft":
	str path = "wiki_tests/beginners_guide/variables_and_types";
	str file = "15_casting_mismatch.ft";
	(exit_code, output) := system_command($"flintc --no-colors --file {path}/{file}");
	assert(exit_code == 1);
	assert(starts_with(output, "Parse Error at wiki_tests/beginners_guide/variables_and_types/15_casting_mismatch.ft:2:15\n -- Type mismatch of expression 3.3;\n -- Expected i32 but got f32\n"));

test "16_casting_simple.ft":
	str path = "wiki_tests/beginners_guide/variables_and_types";
	str file = "16_casting_simple.ft";
	(exit_code, output) := system_command($"flintc --file {path}/{file}");
	assert(exit_code == 0);
	assert(output == "");
	(exit_code, output) = system_command("./main");
	assert(exit_code == 0);
	assert(output == "");

test "17_casting_string.ft":
	str path = "wiki_tests/beginners_guide/variables_and_types";
	str file = "17_casting_string.ft";
	(exit_code, output) := system_command($"flintc --file {path}/{file}");
	assert(exit_code == 0);
	assert(output == "");
	(exit_code, output) = system_command("./main");
	assert(exit_code == 0);
	assert(output == "fval = 3.3\n");

test "18_casting_cutoff.ft":
	str path = "wiki_tests/beginners_guide/variables_and_types";
	str file = "18_casting_cutoff.ft";
	(exit_code, output) := system_command($"flintc --file {path}/{file}");
	assert(exit_code == 0);
	assert(output == "");
	(exit_code, output) = system_command("./main");
	assert(exit_code == 0);
	assert(output == "fval = 3.7, ival = 3\n");

test "19_casting_implicit.ft":
	str path = "wiki_tests/beginners_guide/variables_and_types";
	str file = "19_casting_implicit.ft";
	(exit_code, output) := system_command($"flintc --file {path}/{file}");
	assert(exit_code == 0);
	assert(output == "");
	(exit_code, output) = system_command("./main");
	assert(exit_code == 0);
	// NOTE: This should print 'fval = 3.0\n' but it does not print that yet
	assert(output == "fval = 3\n");

test "20_interpol_addition.ft":
	str path = "wiki_tests/beginners_guide/variables_and_types";
	str file = "20_interpol_addition.ft";
	(exit_code, output) := system_command($"flintc --file {path}/{file}");
	assert(exit_code == 0);
	assert(output == "");
	(exit_code, output) = system_command("./main");
	assert(exit_code == 0);
	assert(output == "fval = 3\n");

test "21_interpol.ft":
	str path = "wiki_tests/beginners_guide/variables_and_types";
	str file = "21_interpol.ft";
	(exit_code, output) := system_command($"flintc --file {path}/{file}");
	assert(exit_code == 0);
	assert(output == "");
	(exit_code, output) = system_command("./main");
	assert(exit_code == 0);
	assert(output == "Hello, my name is Flint and I am 1 years old.\n");

test "22_interpol_variable.ft":
	str path = "wiki_tests/beginners_guide/variables_and_types";
	str file = "22_interpol_variable.ft";
	(exit_code, output) := system_command($"flintc --file {path}/{file}");
	assert(exit_code == 0);
	assert(output == "");
	(exit_code, output) = system_command("./main");
	assert(exit_code == 0);
	assert(output == "The value of pi is approximately 3.14\n2 + 2 equals 4\n");
