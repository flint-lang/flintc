use Core.system
use Core.assert

/// @brief Checks whether a given string starts with the given other string
///
/// @brief `string` The string to check
/// @brief `check` The string with which the other string may start with
/// @return `bool` Whether the `string` starts with `check`
def starts_with(str string, str check) -> bool:
	if string.length < check.length:
		return false;
	for (i, c) in check:
		if c != string[i]:
			return false;
	return true;

/// @brief Compiles a given file and expects compilation to succeed. The compiled program
///        is expected to have the given expected output.
///
/// @param `file` The file to compile
/// @param `expected_output` The expected output of the compiled program
def test_file_ok(str file, str expected_output):
	(exit_code, output) := system_command($"flintc --file {file}");
	assert(exit_code == 0);
	assert(output == "");
	(exit_code, output) = system_command("./main");
	assert(exit_code == 0);
	assert(output == expected_output);

/// @brief Compiles a given file and expects compilation to succeed. The compiled program
///        is expected to have the given expected output.
///
/// @param `path` The path in which to compile and execute the program
/// @param `file` The file to compile
/// @param `expected_output` The expected output of the compiled program
def test_file_ok_in(str path, str file, str expected_output):
	(unused, cwd) := system_command("echo -n $(pwd)");
	(exit_code, output) := system_command($"cd {cwd}/{path}; flintc --file {file}");
	assert(exit_code == 0);
	assert(output == "");
	(exit_code, output) = system_command($"{cwd}/{path}/main");
	assert(exit_code == 0);
	assert(output == expected_output);

/// @brief Compiles a given file and expects compilation to fail with an expected output
///
/// @param `file` The file to compile
/// @param `expected_output` The expected output of the compiler
def test_file_fail(str file, str expected_output):
	(exit_code, output) := system_command($"flintc --no-colors --file {file}");
	assert(exit_code == 1);
	assert(starts_with(output, expected_output));

/// @brief Executes a given command inside a subdirectory and expects a given output
///
/// @param `path` The path in which to execute the command
/// @param `file` The file to compile
/// @param `expected_output` The expected output of the failing compilation 
def test_file_fail_in(str path, str file, str expected_output):
	(unused, cwd) := system_command("echo -n $(pwd)");
	(exit_code, output) := system_command($"cd {cwd}/{path}; flintc --no-colors --file {file}");
	assert(exit_code == 1);
	assert(starts_with(output, expected_output));

/// @brief Tries to compile the given file, expecting compilation to succeed but the
///        compiled program to crash
///
/// @param `file` The file to compile
/// @param `expected_output` The expected output of the run program
def test_file_crash(str file, str expected_output):
	(exit_code, output) := system_command($"flintc --file {file}");
	assert(exit_code == 0);
	assert(output == "");
	(exit_code, output) = system_command("./main");
	assert(exit_code != 0);
	assert(output == expected_output);
